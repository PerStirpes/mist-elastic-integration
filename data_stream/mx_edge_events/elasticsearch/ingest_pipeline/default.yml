--- 
description: "Pipeline to process Mist Edge (mx-edge) event logs"
processors:
  - set:
      tag: set_ecs_version
      field: ecs.version
      value: 8.11.0

  - set:
      tag: copy_original_message
      field: originalMessage
      copy_from: message

  - rename:
      tag: rename_message_to_event_original
      field: originalMessage
      target_field: event.original
      ignore_missing: true
      if: ctx.event?.original == null

  - remove:
      tag: remove_copied_message
      field: originalMessage
      ignore_missing: true
      if: ctx.event?.original != null

  - remove:
      tag: remove_message_field
      field: message
      ignore_missing: true

  # Parse the JSON string from event.original into mist.mx_edge_events
  - json:
      tag: json_parse_event
      field: event.original
      target_field: mist.mx_edge_events
      ignore_failure: true
      if: ctx.event?.original != null && 
          (ctx.event.original.trim().startsWith('{') || ctx.event.original.trim().startsWith('['))

  - rename:
      ignore_missing: true
      field: mist.mx_edge_events.org_id
      target_field: organization.id

  - rename:
      ignore_missing: true
      field: mist.mx_edge_events.type
      target_field: event.code

  - rename:
      ignore_missing: true
      field: "@timestamp"
      target_field: cribl_timestamp



  # Convert timestamp from seconds (with fractional part) to milliseconds (as long)
#   - script:
#       tag: convert_timestamp_to_ms
#       lang: painless
      # if: ctx.mist?.mx_edge_events?.timestamp != null
      # source: |
      #   def ts = ctx.mist.mx_edge_events.timestamp;
      #   if (ts instanceof String) {
      #     // Parse string (which may include fractional seconds) to double, then to ms
      #     try {
      #       double seconds = Double.parseDouble(ts);
      #       ctx.mist.mx_edge_events.timestamp = (long) (seconds * 1000);
      #     } catch (Exception e) {
      #       // If parse fails, leave timestamp as-is (or it will be removed later if not parseable)
      #     }
      #   } else if (ts instanceof Number) {
      #     // If already a number (seconds), convert to milliseconds
      #     double seconds = ((Number) ts).doubleValue();
      #     ctx.mist.mx_edge_events.timestamp = (long) (seconds * 1000);
      #   }

  

  - script:                   # 2) ensure seconds-since-epoch become milliseconds
      description: "Convert 10-digit seconds to 13-digit millis; keep fractional parts"
      source: |
        if (ctx.mist.mx_edge_events.containsKey('timestamp')) {
          def ts = ctx.mist.mx_edge_events.timestamp;
          if (ts instanceof String) {          // tolerate quoted numbers
            ts = Double.parseDouble(ts);
          }
          if (ts < 1e12) {                     // seconds â†’ millis
            ts = Math.round(ts * 1000);
          } else {
            ts = Math.round(ts);               // already millis; drop fractions
          }
          ctx.mist.mx_edge_events.timestamp = ts;
        }
  # Use the timestamp (epoch ms) to set the @timestamp field for the event

  - date:                     # 3) write @timestamp
      field: mist.mx_edge_events.timestamp
      target_field: "@timestamp"
      formats:
        - UNIX_MS
  # Categorize the event under "network"
  - append:
      tag: set_event_category
      field: event.category
      value: [ "network" ]
      allow_duplicates: false

  # Remove null or empty fields from all levels of the document
  - script:
      tag: drop_null_empty_values
      lang: painless
      source: |
        boolean removeEmpty(def value) {
          if (value == null || (value instanceof String && value.trim().length() == 0)) {
            return true;
          } else if (value instanceof Map) {
            value.entrySet().removeIf(entry -> removeEmpty(entry.getValue()));
            return value.isEmpty();
          } else if (value instanceof List) {
            value.removeIf(item -> removeEmpty(item));
            return value.isEmpty();
          }
          return false;
        }
        removeEmpty(ctx);

on_failure:
  - append:
      field: error.message
      value: >-
        Processor {{{_ingest.on_failure_processor_type}}} with tag 
        {{{_ingest.on_failure_processor_tag}}} in pipeline 
        {{{_ingest.on_failure_pipeline}}} failed with message: 
        {{{_ingest.on_failure_message}}}
  - set:
      field: event.kind
      value: "pipeline_error"