--- 
description: "Pipeline to process Mist Edge (mx-edge) event logs"
processors:
  - set:
      tag: set_ecs_version
      field: ecs.version
      value: 8.11.0

  - set:
      tag: copy_original_message
      field: originalMessage
      copy_from: message

  - rename:
      tag: rename_message_to_event_original
      field: originalMessage
      target_field: event.original
      ignore_missing: true
      if: ctx.event?.original == null

  - remove:
      tag: remove_copied_message
      field: originalMessage
      ignore_missing: true
      if: ctx.event?.original != null

  - remove:
      tag: remove_message_field
      field: message
      ignore_missing: true

  # Parse the JSON string from event.original into mist.mx_edge_events
  - json:
      tag: json_parse_event
      field: event.original
      target_field: mist.mx_edge_events
      ignore_failure: true
      if: ctx.event?.original != null && 
          (ctx.event.original.trim().startsWith('{') || ctx.event.original.trim().startsWith('['))

  - rename:
      ignore_missing: true
      field: mist.mx_edge_events.org_id
      target_field: organization.id

  - rename:
      ignore_missing: true
      field: mist.mx_edge_events.type
      target_field: event.code

  - rename:
      ignore_missing: true
      field: "@timestamp"
      target_field: cribl_timestamp



  - script:
      tag: normalize_timestamp_millis
      lang: painless
      source: |-
        def nested = ctx.mist?.mx_edge_events;
        if (nested != null && nested.timestamp != null) {
          def raw = nested.timestamp;

          /* ---- Strings ------------------------------------------------- */
          if (raw instanceof String) {
            raw = raw.trim();
            if (raw.contains(".")) {                    // "1746â€¦688.844081"
              raw = (long)(Double.parseDouble(raw) * 1000L);
            } else {
              raw = Long.parseLong(raw);                // "1750701995" etc.
            }
          }

          /* ---- Numbers ------------------------------------------------- */
          long ts;
          if (raw instanceof Float || raw instanceof Double) {  //  float secs
            ts = (long)(((Number)raw).doubleValue() * 1000L) ;
          } else {                                              // int secs/ms
            ts = ((Number)raw).longValue();
            if (ts < 1000000000000L) {      // still seconds
              ts = ts * 1000;                   // 64-bit multiplication
            }
          }

          nested.timestamp_millis = ts;         // always positive & correct
        }
        
  - date:
      description: "Parse normalized timestamp to @timestamp"
      field: "mist.mx_edge_events.timestamp_millis"
      target_field: "@timestamp"
      formats: ["UNIX_MS"]
      output_format: "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
  - remove:
      ignore_missing: true
      tag: remove_timestamp_millis
      field: mist.mx_edge_events.timestamp_millis

  - remove:
      ignore_missing: true
      tag: remove_timestamp
      field: mist.mx_edge_events.timestamp
      
  # Categorize the event under "network"
  - append:
      tag: set_event_category
      field: event.category
      value: [ "network" ]
      allow_duplicates: false

  # Remove null or empty fields from all levels of the document
  - script:
      tag: drop_null_empty_values
      lang: painless
      source: |
        boolean removeEmpty(def value) {
          if (value == null || (value instanceof String && value.trim().length() == 0)) {
            return true;
          } else if (value instanceof Map) {
            value.entrySet().removeIf(entry -> removeEmpty(entry.getValue()));
            return value.isEmpty();
          } else if (value instanceof List) {
            value.removeIf(item -> removeEmpty(item));
            return value.isEmpty();
          }
          return false;
        }
        removeEmpty(ctx);

on_failure:
  - append:
      field: error.message
      value: >-
        Processor {{{_ingest.on_failure_processor_type}}} with tag 
        {{{_ingest.on_failure_processor_tag}}} in pipeline 
        {{{_ingest.on_failure_pipeline}}} failed with message: 
        {{{_ingest.on_failure_message}}}
  - set:
      field: event.kind
      value: "pipeline_error"