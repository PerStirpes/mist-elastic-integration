description: "Combined pipeline for Juniper Mist NAC Events and NAC Accounting"
processors:
  # 1. Set ECS version
  - set:
      tag: set_ecs_version
      field: ecs.version
      value: 8.11.0

  # 2. Preserve original message
  - set:
      tag: preserve_original
      field: event.original
      copy_from: message

  # 3. Remove raw message field
  - remove:
      field: message
      ignore_missing: true

  # 4. Parse JSON into a generic namespace
  - json:
      tag: parse_mist_nac
      field: event.original
      target_field: mist.nac

  # 5. Route into nac_events vs nac_accounting
  - script:
      tag: route_to_event_or_accounting
      lang: painless
      source: |
        if (ctx.mist?.nac?.type != null && ctx.mist.nac.type.startsWith("NAC_ACCOUNTING")) {
          ctx.mist.nac_accounting = ctx.mist.remove("nac");
        } else {
          ctx.mist.nac_events = ctx.mist.remove("nac");
        }

  ######################################
  # === NAC EVENTS PROCESSORS (if) === #
  ######################################

  # 6a. Only if this is an auth event
  - convert:
      if: "ctx.mist?.nac_events != null"
      tag: nas_ip_to_observer_ip
      field: mist.nac_events.nas_ip
      target_field: observer.ip
      type: ip
      ignore_missing: true
      ignore_failure: true
  - convert:
      if: "ctx.mist?.nac_events?.random_mac != null"
      tag: random_mac_to_bool_acc
      field: mist.nac_events.random_mac
      type: boolean          # <-- converts the string "false"/"true" to real booleans
      ignore_missing: true   # don’t fail if the field is absent
      ignore_failure: true   # don’t fail if the value can’t be parsed

  - rename:
      if: "ctx.mist?.nac_events != null"
      tag: map_client_mac
      field: mist.nac_events.mac
      target_field: client.mac
      ignore_missing: true

  - rename:
      if: "ctx.mist?.nac_events != null"
      tag: map_device_mac_to_observer_mac
      field: mist.nac_events.device_mac
      target_field: observer.mac
      ignore_missing: true

  - rename:
      if: "ctx.mist?.nac_events != null"
      tag: map_nas_vendor_to_observer_vendor
      field: mist.nac_events.nas_vendor
      target_field: observer.vendor
      ignore_missing: true

  - rename:
      if: "ctx.mist?.nac_events != null"
      tag: map_org_to_organization_id
      field: mist.nac_events.org_id
      target_field: organization.id
      ignore_missing: true

  - rename:
      if: "ctx.mist?.nac_events != null"
      tag: map_username_to_user_name
      field: mist.nac_events.username
      target_field: user.name
      ignore_missing: true

  - script:
      tag: normalize_timestamp_millis
      lang: painless
      source: |-
        def nested = ctx.mist?.nac_events;
        if (nested != null && nested.timestamp != null) {
          def raw = nested.timestamp;

          /* ---- Strings ------------------------------------------------- */
          if (raw instanceof String) {
            raw = raw.trim();
            if (raw.contains(".")) {                    // "1746…688.844081"
              raw = (long)(Double.parseDouble(raw) * 1000L);
            } else {
              raw = Long.parseLong(raw);                // "1750701995" etc.
            }
          }

          /* ---- Numbers ------------------------------------------------- */
          long ts;
          if (raw instanceof Float || raw instanceof Double) {  //  float secs
            ts = (long)(((Number)raw).doubleValue() * 1000L) ;
          } else {                                              // int secs/ms
            ts = ((Number)raw).longValue();
            if (ts < 1000000000000L) {      // still seconds
              ts = ts * 1000;                   // 64-bit multiplication
            }
          }

          nested.timestamp_millis = ts;         // always positive & correct
        }
        
  - date:
      ignore_failure: true
      description: "Parse normalized timestamp to @timestamp"
      field: "mist.nac_events.timestamp_millis"
      target_field: "@timestamp"
      formats: ["UNIX_MS"]
      output_format: "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
  - remove:
      ignore_missing: true
      tag: remove_timestamp_millis
      field: mist.nac_events.timestamp_millis

  - remove:
      ignore_missing: true
      tag: remove_timestamp
      field: mist.nac_events.timestamp
      
  - rename:
      if: "ctx.mist?.nac_events != null"
      tag: map_text_to_event_reason
      field: mist.nac_events.text
      target_field: message
      ignore_missing: true

  - rename:
      if: "ctx.mist?.nac_events != null"
      tag: map_idp_roles_to_user_roles
      field: mist.nac_events.idp_role
      target_field: user.roles
      ignore_missing: true

  - geoip:
      if: "ctx.mist?.nac_events != null"
      tag: geoip_observer_ip_events
      field: observer.ip
      target_field: observer.geo
      ignore_missing: true

  - geoip:
      if: "ctx.mist?.nac_events != null"
      tag: geoip_observer_asn_events
      field: observer.ip
      target_field: observer.as
      database_file: GeoLite2-ASN.mmdb
      properties: ["asn", "organization_name"]
      ignore_missing: true

  - rename:
      if: "ctx.mist?.nac_events != null"
      field: observer.as.asn
      target_field: observer.as.number
      ignore_missing: true

  - rename:
      if: "ctx.mist?.nac_events != null"
      field: observer.as.organization_name
      target_field: observer.as.organization.name
      ignore_missing: true

  - set:
      tag: set_event_category_auth
      field: event.category
      value: ["authentication"]

  - append:
      if: "ctx.mist?.nac_events != null && (ctx.mist.nac_events?.type == 'NAC_CLIENT_PERMIT' || ctx.mist.nac_events?.type == 'NAC_CLIENT_DENY')"
      tag: add_event_category_network_events
      field: event.category
      value: "network"
      allow_duplicates: false

  - set:
      if: "ctx.mist.nac_events?.type == 'NAC_CLIENT_DENY'"
      tag: set_event_type_denied_events
      field: event.type
      value: "denied"

  - set:
      if: "ctx.mist.nac_events?.type == 'NAC_CLIENT_PERMIT'"
      tag: set_event_type_allowed_events
      field: event.type
      value: "allowed"

  - set:
      if: "ctx.mist?.nac_events != null && (ctx.mist.nac_events?.type == 'NAC_CLIENT_DENY' || ctx.mist.nac_events?.type?.endsWith('FAILURE'))"
      tag: set_event_outcome_failure_events
      field: event.outcome
      value: "failure"

  - set:
      if: "ctx.mist?.nac_events != null && (ctx.mist.nac_events?.type == 'NAC_CLIENT_PERMIT' || ctx.mist.nac_events?.type?.endsWith('SUCCESS'))"
      tag: set_event_outcome_success_events
      field: event.outcome
      value: "success"

  - append:
      if: "ctx.mist?.nac_events != null"
      tag: related_observer_ip_events
      field: related.ip
      value: "{{{observer.ip}}}"
      allow_duplicates: false

  - append:
      if: "ctx.mist?.nac_events != null"
      tag: related_client_mac_events
      field: related.user
      value: "{{{client.mac}}}"
      allow_duplicates: false

  - append:
      if: "ctx.mist?.nac_events != null"
      tag: related_observer_mac_events
      field: related.user
      value: "{{{observer.mac}}}"
      allow_duplicates: false

  - append:
      if: "ctx.mist?.nac_events != null"
      tag: related_username_events
      field: related.user
      value: "{{{user.name}}}"
      allow_duplicates: false
  - rename:
     tag: map_nac_event_tupe_to_event_code
     field: mist.nac_events.type
     target_field: event.code
     ignore_missing: true
     
  - remove:
      if: "ctx.mist?.nac_events != null"
      tag: drop_nas_ip_events
      field: mist.nac_events.nas_ip
      ignore_missing: true
  - remove:
      tag: drop_nas_events.type
      field: mist.nac_events.type
      ignore_missing: true

  ###########################################
  # === NAC ACCOUNTING PROCESSORS (if) === #
  ###########################################

  - convert:
      if: "ctx.mist?.nac_accounting != null"
      tag: nas_ip_to_observer_ip_acc
      field: mist.nac_accounting.nas_ip
      target_field: observer.ip
      type: ip
      ignore_missing: true
      ignore_failure: true

  - convert:
      if: "ctx.mist?.nac_accounting != null"
      tag: client_ip_to_client_ip_acc
      field: mist.nac_accounting.client_ip
      target_field: client.ip
      type: ip
      ignore_missing: true
      ignore_failure: true

  - script:
      tag: normalize_timestamp_millis
      lang: painless
      source: |-
        def nested = ctx.mist?.nac_accounting;
        if (nested != null && nested.timestamp != null) {
          def raw = nested.timestamp;

          /* ---- Strings ------------------------------------------------- */
          if (raw instanceof String) {
            raw = raw.trim();
            if (raw.contains(".")) {                    // "1746…688.844081"
              raw = (long)(Double.parseDouble(raw) * 1000L);
            } else {
              raw = Long.parseLong(raw);                // "1750701995" etc.
            }
          }

          /* ---- Numbers ------------------------------------------------- */
          long ts;
          if (raw instanceof Float || raw instanceof Double) {  //  float secs
            ts = (long)(((Number)raw).doubleValue() * 1000L) ;
          } else {                                              // int secs/ms
            ts = ((Number)raw).longValue();
            if (ts < 1000000000000L) {      // still seconds
              ts = ts * 1000;                   // 64-bit multiplication
            }
          }

          nested.timestamp_millis = ts;         // always positive & correct
        }
        
  - date:
      ignore_failure: true
      description: "Parse normalized timestamp to @timestamp"
      field: "mist.nac_accounting.timestamp_millis"
      target_field: "@timestamp"
      formats: ["UNIX_MS"]
      output_format: "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"

  - remove:
      ignore_missing: true
      tag: remove_timestamp_millis
      field: mist.nac_accounting.timestamp_millis

  - remove:
      ignore_missing: true
      tag: remove_timestamp
      field: mist.nac_accounting.timestamp
  - rename:
      if: "ctx.mist?.nac_accounting != null"
      tag: map_type_to_event_code
      field: mist.nac_accounting.type
      target_field: event.code
      ignore_missing: true

  - rename:
      if: "ctx.mist?.nac_accounting != null"
      tag: map_client_mac_acc
      field: mist.nac_accounting.mac
      target_field: client.mac
      ignore_missing: true

  - rename:
      if: "ctx.mist?.nac_accounting != null"
      tag: map_username_to_user_name_acc
      field: mist.nac_accounting.username
      target_field: user.name
      ignore_missing: true

  - rename:
      if: "ctx.mist?.nac_accounting != null"
      tag: map_nas_vendor_to_observer_vendor_acc
      field: mist.nac_accounting.nas_vendor
      target_field: observer.vendor
      ignore_missing: true

  - rename:
      if: "ctx.mist?.nac_accounting != null"
      tag: map_org_to_organization_id_acc
      field: mist.nac_accounting.org_id
      target_field: organization.id
      ignore_missing: true

  - rename:
      if: "ctx.mist?.nac_accounting != null"
      tag: map_device_mac_to_observer_mac_acc
      field: mist.nac_accounting.device_mac
      target_field: observer.mac
      ignore_missing: true

  - rename:
      if: "ctx.mist?.nac_accounting != null"
      tag: map_ap_to_observer_mac_acc
      field: mist.nac_accounting.ap
      target_field: observer.mac
      ignore_missing: true

  - geoip:
      if: "ctx.mist?.nac_accounting != null"
      tag: geoip_observer_ip_acc
      field: observer.ip
      target_field: observer.geo
      ignore_missing: true

  - geoip:
      if: "ctx.mist?.nac_accounting != null"
      tag: geoip_observer_asn_acc
      field: observer.ip
      target_field: observer.as
      database_file: GeoLite2-ASN.mmdb
      properties: ["asn", "organization_name"]
      ignore_missing: true

  - rename:
      if: "ctx.mist?.nac_accounting != null"
      field: observer.as.asn
      target_field: observer.as.number
      ignore_missing: true

  - rename:
      if: "ctx.mist?.nac_accounting != null"
      field: observer.as.organization_name
      target_field: observer.as.organization.name
      ignore_missing: true

  - set:
      if: "ctx.mist?.nac_accounting != null"
      tag: set_event_category_network_acc
      field: event.category
      value: ["network"]

  - set:
      if: "ctx.mist?.nac_accounting != null && (ctx.mist.nac_accounting?.type == 'NAC_ACCOUNTING_START')"
      tag: set_event_type_start_acc
      field: event.type
      value: "start"

  - set:
      if: "ctx.mist?.nac_accounting != null && (ctx.mist.nac_accounting?.type == 'NAC_ACCOUNTING_STOP')"
      tag: set_event_type_end_acc
      field: event.type
      value: "end"

  - set:
      if: "ctx.mist?.nac_accounting != null && (ctx.mist.nac_accounting?.type == 'NAC_ACCOUNTING_UPDATE')"
      tag: set_event_type_info_acc
      field: event.type
      value: "info"

  - set:
      if: "ctx.mist?.nac_accounting != null"
      tag: set_event_outcome_success_acc
      field: event.outcome
      value: "success"

  - append:
      if: "ctx.mist?.nac_accounting != null"
      tag: related_observer_ip_acc
      field: related.ip
      value: "{{{observer.ip}}}"
      allow_duplicates: false

  - append:
      if: "ctx.mist?.nac_accounting != null"
      tag: related_client_ip_acc
      field: related.ip
      value: "{{{client.ip}}}"
      allow_duplicates: false

  - append:
      if: "ctx.mist?.nac_accounting != null"
      tag: related_client_mac_acc
      field: related.user
      value: "{{{client.mac}}}"
      allow_duplicates: false

  - append:
      if: "ctx.mist?.nac_accounting != null"
      tag: related_observer_mac_acc
      field: related.user
      value: "{{{observer.mac}}}"
      allow_duplicates: false

  - append:
      if: "ctx.mist?.nac_accounting != null"
      tag: related_username_acc
      field: related.user
      value: "{{{user.name}}}"
      allow_duplicates: false

  - remove:
      if: "ctx.mist?.nac_accounting != null"
      tag: drop_nas_ip_acc
      field:
        - mist.nac_accounting.nas_ip
        - mist.nac_accounting.client_ip
      ignore_missing: true
      
  - set:
      tag: copy_original_message
      field: raw.original
      copy_from: event.original

  - remove:
      ignore_failure: true
      ignore_missing: true
      if: ctx?.tags == null || !(ctx.tags.contains("preserve_original_event"))
      tag: remove_original_event
      field: event.original

on_failure:
  - append:
      field: error.message
      value: "Failed in pipeline '{{{ _ingest.on_failure_pipeline }}}', processor '{{{ _ingest.on_failure_processor_tag }}}': {{{ _ingest.on_failure_message }}}"
  - set:
      field: event.kind
      value: "pipeline_error"