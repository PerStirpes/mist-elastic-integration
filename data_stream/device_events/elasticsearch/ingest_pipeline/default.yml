description: "Unified pipeline for Juniper Mist device events (including up/down status events)"
processors:
  # 1. Preserve original message and move it to event.original (if not already there)
  - set:
      tag: set_ecs_version
      field: ecs.version
      value: 8.11.0
  - set:
      tag: copy_original_message
      field: originalMessage
      copy_from: message
  - rename:
      tag: rename_message
      field: originalMessage
      target_field: event.original
      if: ctx.event?.original == null
      ignore_missing: true
  - remove:
      tag: remove_copied_message
      field: originalMessage
      if: ctx.event?.original != null
      ignore_missing: true
  - remove:
      tag: remove_message
      field: message
      ignore_missing: true

  # 2. Parse JSON string (if present) into mist.device_events object
  - json:
      tag: json_original
      field: event.original
      target_field: mist.device_events
      if: ctx.event?.original != null && (ctx.event.original.trim().startsWith('{') || ctx.event.original.trim().startsWith('['))
      ignore_failure: true

  # 3. Map Mist device event fields to ECS or appropriate fields
  ## Common fields (present in both device-events and device-updowns topics)
  - rename:
      field: mist.device_events.site_name       # e.g. "VA Los Angeles - Los Angeles VAMC"
      target_field: organization.name
      ignore_missing: true
  - rename:
      field: mist.device_events.org_id
      target_field: organization.id
      ignore_missing: true
  - rename:
      field: mist.device_events.ap              # Device identifier (MAC or ID)
      target_field: observer.mac                # Map AP MAC to observer's MAC address
      ignore_missing: true
#   - rename:
#       field: mist.device_events.ap_name         # Device name from Mist
#       target_field: observer.name               # We might also set this via script below
#       ignore_missing: true

  ## Fields mainly in general device events (but safe to include)
 
  - rename:
      field: mist.device_events.audit_id        # Unique event ID from Mist (if present)
      target_field: event.id
      ignore_missing: true
  - rename:
      field: mist.device_events.reason          # Reason code or description
      target_field: event.reason
      ignore_missing: true
  - rename:
      field: mist.device_events.device_type     # "ap", "switch", etc.
      target_field: observer.type
      ignore_missing: true
#   - rename:
#       field: mist.device_events.device_name     # Some events use device_name field
#       target_field: observer.name
#       ignore_missing: true
  - remove:
      field: mist.device_events.mac             # Remove duplicate MAC field if it exists
      ignore_missing: true

  ## Set constant fields
  - set:
      field: observer.vendor
      value: "juniper"                          # All these events are from Juniper (Mist)


 # depending on the type of event, the ap_name or device_name will be used as the observer.name
  - script:
      description: Set observer.name from device_name or ap_name (device_name takes priority)
      lang: painless
      source: |
        def dev = ctx?.mist?.device_events?.device_name;
        def ap = ctx?.mist?.device_events?.ap_name;
        if ((dev != null && !dev.isEmpty()) || (ap != null && !ap.isEmpty())) {
          ctx.observer = ctx.observer != null ? ctx.observer : [:];
          ctx.observer.name = dev != null && !dev.isEmpty() ? dev : ap;
        }
  # 4. Cleanup any null/empty fields to tidy up the document
  - script:
      tag: script_drop_null_empty_values
      description: "Drops null/empty values recursively"
      lang: painless
      source: |
        boolean dropEmptyFields(Object obj) {
          if (obj == null || obj == "") return true;
          else if (obj instanceof Map) {
            ((Map)obj).values().removeIf(v -> dropEmptyFields(v));
            return ((Map)obj).isEmpty();
          } else if (obj instanceof List) {
            ((List)obj).removeIf(v -> dropEmptyFields(v));
            return ((List)obj).isEmpty();
          }
          return false;
        }
        dropEmptyFields(ctx);

  # 5. Categorize and timestamp
  - append:
      field: event.category
      value: ["network"]
      allow_duplicates: false
#   - date:
#       tag: set_event_timestamp
#       field: mist.device_events.timestamp
#       target_field: "@timestamp"
#       if: ctx.mist?.device_events?.timestamp != null
#       formats: ["UNIX"]

on_failure:
  - append:
      field: error.message
      value: >-
        Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}
  - set:
      field: event.kind
      value: "pipeline_error"