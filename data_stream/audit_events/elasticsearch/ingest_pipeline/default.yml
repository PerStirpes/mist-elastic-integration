---
description: Pipeline to process juniper mist audit_events logs
processors:
  - set:
      tag: set_ecs_version
      field: ecs.version
      value: 8.11.0
  - set:
      tag: copy_original_message
      field: originalMessage
      copy_from: message
  - rename:
      ignore_missing: true
      if: ctx.event?.original == null
      tag: rename_message
      field: originalMessage
      target_field: event.original
  - remove:
      ignore_missing: true
      if: ctx.event?.original != null
      tag: remove_copied_message
      field: originalMessage
  - remove:
      ignore_missing: true
      tag: remove_message
      field: message
  - json:
      tag: json_original
      field: event.original
      target_field: mist.audit_events
  - rename:
      ignore_missing: true
      field: "@timestamp"
      target_field: cribl_timestamp
# Normalize the timestamp field 
 
  - script:
      tag: normalize_timestamp_millis
      lang: painless
      source: |-
        def ne = ctx.mist?.audit_events;
        if (ne?.timestamp != null) {
          // parse any numeric or string value into a double
          double t = Double.parseDouble(ne.timestamp.toString());
          // if it looks like seconds (10-digit / fractional), convert to ms
          if (t < 1e12) {
            t *= 1000;
          }
          ne.timestamp_millis = (long) t;
        }
       
  - date:
      description: "Parse normalized timestamp to @timestamp"
      field: "mist.audit_events.timestamp_millis"
      target_field: "@timestamp"
      formats: ["UNIX_MS"]
      output_format: "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
  - remove:
      ignore_missing: true
      tag: remove_timestamp_millis
      field: mist.audit_events.timestamp_millis

  - remove:
      ignore_missing: true
      tag: remove_timestamp
      field: mist.audit_events.timestamp
      
  - rename:
      field: mist.audit_events.message
      target_field: message
      ignore_missing: true         
      
  - convert:
      ignore_failure: true
      ignore_missing: true
      field: mist.audit_events.src_ip
      target_field: source.ip
      type: ip
  - rename:
      ignore_missing: true
      field: mist.audit_events.org_id
      target_field: organization.id
  - rename:
      ignore_missing: true
      field: mist.audit_events.id
      target_field: event.id
  - rename:
      ignore_missing: true
      field: mist.audit_events.admin_name
      target_field: user.full_name
  - rename:
      ignore_missing: true
      field: mist.audit_events.user_agent
      target_field: user_agent.original
#NOTE: Timestamp is provide by the cribl integration, so we do not need to parse it from the mist.audit_events      
#   - script:
#       tag: script_convert_array_to_string
#       description: Ensures the date processor does not receive an array value.
#       lang: painless
#       source: |
#         if (ctx.mist?.audit_events?.timestamp != null &&
#             ctx.mist.audit_events.timestamp instanceof ArrayList){
#             ctx.mist.audit_events.timestamp = ctx.mist.audit_events.timestamp[0];
#         }
#   - date:
#       if: ctx.mist?.audit_events?.timestamp != null
#       tag: date_processor_mist.audit_events.timestamp
#       field: mist.audit_events.timestamp
#       target_field: '@timestamp'
#       formats:
#         - UNIX_MS
  - script:
      tag: script_drop_null_empty_values
      description: Drops null/empty values recursively.
      lang: painless
      source: |
        boolean dropEmptyFields(Object object) {
          if (object == null || object == "") {
            return true;
          } else if (object instanceof Map) {
            ((Map) object).values().removeIf(value -> dropEmptyFields(value));
            return (((Map) object).size() == 0);
          } else if (object instanceof List) {
            ((List) object).removeIf(value -> dropEmptyFields(value));
            return (((List) object).length == 0);
          }
          return false;
        }
        dropEmptyFields(ctx);
  - geoip:
      ignore_missing: true
      tag: geoip_source_ip
      field: source.ip
      target_field: source.geo
  - geoip:
      ignore_missing: true
      tag: geoip_source_asn
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      target_field: source.as
      properties:
        - asn
        - organization_name
  - rename:
      ignore_missing: true
      tag: rename_source_as_asn
      field: source.as.asn
      target_field: source.as.number
  - rename:
      ignore_missing: true
      tag: rename_source_as_organization_name
      field: source.as.organization_name
      target_field: source.as.organization.name
  - geoip:
      ignore_missing: true
      tag: geoip_destination_ip
      field: destination.ip
      target_field: destination.geo
  - geoip:
      ignore_missing: true
      tag: geoip_destination_asn
      database_file: GeoLite2-ASN.mmdb
      field: destination.ip
      target_field: destination.as
      properties:
        - asn
        - organization_name
  - rename:
      ignore_missing: true
      tag: rename_destination_as_asn
      field: destination.as.asn
      target_field: destination.as.number
  - rename:
      ignore_missing: true
      tag: rename_destination_as_organization_name
      field: destination.as.organization_name
      target_field: destination.as.organization.name
  - remove:
      ignore_missing: true
      tag: remove_fields
      field:
        - mist.audit_events.src_ip
  - remove:
      ignore_failure: true
      ignore_missing: true
      if: ctx?.tags == null || !(ctx.tags.contains("preserve_original_event"))
      tag: remove_original_event
      field: event.original
on_failure:
  - append:
      field: error.message
      value: >-
        Processor {{{_ingest.on_failure_processor_type}}} with tag
        {{{_ingest.on_failure_processor_tag}}} in pipeline
        {{{_ingest.on_failure_pipeline}}} failed with message:
        {{{_ingest.on_failure_message}}}
  - set:
      field: event.kind
      value: pipeline_error
